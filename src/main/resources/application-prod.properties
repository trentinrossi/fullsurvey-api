# spring.flyway.schemas=
# spring.datasource.url={JDBC_DATABASE_URL}
# spring.datasource.username={JDBC_DATABASE_USERNAME}
# spring.datasource.password={JDBC_DATABASE_PASSWORD}
# spring.jpa.hibernate.ddl-auto=validate

spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

tenants.datasources.default.jdbcUrl=jdbc:postgresql://ec2-52-72-221-20.compute-1.amazonaws.com:5432/d4sp7bue5fv99c?currentSchema=default
tenants.datasources.default.driverClassName=org.postgresql.Driver
tenants.datasources.default.username=abblyuocbcnoxa
tenants.datasources.default.password=a8df784903035ba4f4ca3b7b8fdd1fa5047c1bf0819ca9132e00d83702062302

tenants.datasources.tenant1.jdbcUrl=jdbc:postgresql://ec2-52-72-221-20.compute-1.amazonaws.com:5432/d4sp7bue5fv99c?currentSchema=tenant1
tenants.datasources.tenant1.driverClassName=org.postgresql.Driver
tenants.datasources.tenant1.username=abblyuocbcnoxa
tenants.datasources.tenant1.password=a8df784903035ba4f4ca3b7b8fdd1fa5047c1bf0819ca9132e00d83702062302

spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=true

# Usando o validate eu vou deixar o FlyWay criar as tabelas e o hibernate somente vai 
# validar no final se existe as tabelas no banco conforme os mapeamentos nas classes
spring.jpa.hibernate.ddl-auto=validate

# spring.flyway.locations=classpath:db/migration/common,classpath:db/migration/Postgres

logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type=TRACE