# spring.jpa.database=POSTGRESQL
# spring.datasource.url=jdbc:postgresql://localhost:5432/postgres?currentSchema=research-default
# spring.datasource.driver-class-name=org.postgresql.Driver
# spring.datasource.username=postgres
# spring.datasource.password=adminadmin

spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

tenants.datasources.default.jdbcUrl=jdbc:postgresql://172.17.0.2:5432/postgres?currentSchema=default
tenants.datasources.default.driverClassName=org.postgresql.Driver
tenants.datasources.default.username=postgres
tenants.datasources.default.password=adminadmin

tenants.datasources.tenant1.jdbcUrl=jdbc:postgresql://172.17.0.2:5432/postgres?currentSchema=tenant1
tenants.datasources.tenant1.driverClassName=org.postgresql.Driver
tenants.datasources.tenant1.username=postgres
tenants.datasources.tenant1.password=adminadmin

tenants.datasources.tenant2.jdbcUrl=jdbc:postgresql://172.17.0.2:5432/postgres?currentSchema=tenant2
tenants.datasources.tenant2.driverClassName=org.postgresql.Driver
tenants.datasources.tenant2.username=postgres
tenants.datasources.tenant2.password=adminadmin

tenants.datasources.tenant3.jdbcUrl=jdbc:postgresql://172.17.0.2:5432/postgres?currentSchema=tenant3
tenants.datasources.tenant3.driverClassName=org.postgresql.Driver
tenants.datasources.tenant3.username=postgres
tenants.datasources.tenant3.password=adminadmin

spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=true

# Usando o validate eu vou deixar o FlyWay criar as tabelas e o hibernate somente vai 
# validar no final se existe as tabelas no banco conforme os mapeamentos nas classes
spring.jpa.hibernate.ddl-auto=validate

# spring.flyway.locations=classpath:db/migration/common,classpath:db/migration/Postgres

logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type=TRACE